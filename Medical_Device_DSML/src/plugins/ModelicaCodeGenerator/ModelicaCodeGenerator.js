/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Thu Dec 14 2017 10:44:26 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (callback) {
   var self = this,
     activeNode = this.activeNode,
      core = this.core,
      logger = this.logger,
      modelJson = {
        name: '',
        components: [],
        connections: []
      };

  function atComponent(nodes, node) {
    var componentData = {
       URI: '',
       name: '',
       parameters: {}
    };
    

    
    componentData.URI = core.getAttribute(node, 'modelicaURI');
    componentData.name = core.getAttribute(node, 'name');
    componentData.L = core.getAttribute(node, 'L');
    componentData.R = core.getAttribute(node, 'R');
    componentData.V = core.getAttribute(node, 'V');
    componentData.C = core.getAttribute(node, 'C');
    
    componentData.parameters = {R: componentData.R, 
                                L: componentData.L,
                                C: componentData.C,
                                V: componentData.V
                                };
    
    
    
    modelJson.components.push(componentData);
  }
  
  function atConnection(nodes, node) {
    var connData = {
       src: '',
       dst: ''
    };
    
    
    var srcPath = core.getPointerPath(node, 'src');
    var dstPath = core.getPointerPath(node, 'dst');
    
   
    if (srcPath && dstPath) {
      modelJson.connections.push(connData); 
      let srcNode = nodes[srcPath];
      let dstNode = nodes[dstPath];
      
      
      let srcParent = core.getParent(srcNode);
      let dstParent = core.getParent(dstNode);
      
      connData.src = core.getAttribute(srcParent, 'name') + '.' + core.getAttribute(srcNode, 'name');
      connData.dst = core.getAttribute(dstParent, 'name') + '.' + core.getAttribute(dstNode, 'name');
    }
  }
  
  function getMoFileContent() {
    var moFile = 'model ' + modelJson.name;
    
    
    modelJson.components.forEach(function (data) {
      moFile += '\n  ' + data.URI + ' ' + data.name + ';';  
    });
    
    moFile += '\nequation';
    
    modelJson.connections.forEach(function (data) {
      moFile += '\n  connect(' + data.src + ', ' + data.dst + ');';  
    });
    
    moFile += '\nend ' + modelJson.name + ';';
    
    logger.debug(moFile);
    
    return moFile;
  }


  this.loadNodeMap(activeNode)
    .then(function (nodes) {
      for (let path in nodes) {
        logger.debug(core.getAttribute(nodes[path], 'name'));
      }

      modelJson.name = core.getAttribute(activeNode, 'name');
      
      
      var childrenPaths = core.getChildrenPaths(activeNode);
      logger.debug('Paths', childrenPaths);
      var childNode;
      
      
      for (let i = 0; i < childrenPaths.length; i += 1) {
        childNode = nodes[childrenPaths[i]];
        
        if (self.isMetaTypeOf(childNode, self.META.Component)) {
          logger.debug('Component:', core.getAttribute(childNode, 'name'));
          atComponent(nodes, childNode);
        } else if (self.isMetaTypeOf(childNode, self.META.ElectricalConnection)) {
          logger.debug('Connection:', core.getAttribute(childNode, 'name'));
          atConnection(nodes, childNode);
        }
      }

      
      logger.debug('modelJson', JSON.stringify(modelJson, null, 2));
    
      
      return self.blobClient.putFile(modelJson.name + '.mo', getMoFileContent());
    })
   
    .then(function (metadataHash) {
      logger.info(metadataHash);
      
      self.result.addArtifact(metadataHash);
      self.result.setSuccess(true);
      callback(null, self.result);
    })
    .catch(function (err) {
      logger.error(err);
      callback(err);
    });

}

    return ModelicaCodeGenerator;
});
